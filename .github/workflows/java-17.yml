name: build java exe

on:
  workflow_call:
    inputs:
      workdir:
        type: string
        required: false
        default: "."
      docker_context:
        type: string
        required: false
        default: "."
      docker_image:
        type: string
        required: true
    secrets:
      DOCKER_USER:
        required: true
      DOCKER_PASSWORD:
        required: true


jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: lzk90s/java-develop-env:maven3-openjdk17
      volumes:
        - /root/.m2:/root/.m2
    env:
      REGISTRY: registry.cn-hangzhou.aliyuncs.com
    steps:
      # 拉取代码
      - name: Checkout source
        uses: actions/checkout@v3


      # 登录docker
      - name: Login to aliyun docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 设置branch环境变量
      - name: Set env.BRANCH
        run: echo "BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)" >> $GITHUB_ENV

      # docker meta
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/team-gs/${{ inputs.docker_image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # 设置qemu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64

      # 设置buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 获取缓存路径
      - name: Get cache directory path
        id: mvn-cache-dir-path
        run: echo "dir=/root/.m2" >>$GITHUB_OUTPUT

      # 挂载缓存
      - name: Use cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.mvn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            ${{ runner.os }}-m2-

      # 初始化环境变量
      - name: Init builder env
        run: init_env.sh

      # 构建包
      - name: Build package
        run: cd ${{ inputs.workdir }} && mvn -Dmaven.test.skip=true -B package

      # 获取当前时间戳
      - name: Get timestamp
        id: timestamp
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          echo "Build timestamp: $TIMESTAMP"
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

      # 输出当前时间戳到日志
      - name: Show timestamp in logs
        run: echo "The current build timestamp is ${{ env.TIMESTAMP }}"
        
      # 构建docker镜像
      - name: Build and push docker
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.docker_context }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      # 在Build Summary中显示时间戳
      - name: Set output for build summary
        run: echo "VERSION=${{ env.TIMESTAMP }}" >> $GITHUB_ENV
        
    outputs:
      version: ${{ steps.build_version.outputs.version }}
