name: build java exe

on:
  workflow_call:
    inputs:
      docker_context:
        type: string
        required: false
        default: "."
      docker_image:
        type: string
        required: true
    secrets:
      DOCKER_USER:
        required: true
      DOCKER_PASSWORD:
        required: true


jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: lzk90s/java-develop-env:maven3-openjdk11
      volumes:
        - /root/.m2:/root/.m2
    env:
      REGISTRY: registry.cn-hangzhou.aliyuncs.com
    steps:
      # 拉取代码
      - name: Checkout source
        uses: actions/checkout@v3

      # 设置branch环境变量
      - name: Set env.BRANCH
        run: echo "BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)" >> $GITHUB_ENV

      # 设置qemu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64

      # 设置buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 登录docker
      - name: Login to docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 获取缓存路径
      - name: Get cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=/root/.m2" >>$GITHUB_OUTPUT

      # 挂载缓存
      - name: Use cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            ${{ runner.os }}-m2-

      # 初始化环境变量
      - name: Init builder env
        run: init_env.sh

      # 构建包
      - name: Build package
        run: mvn -Dmaven.test.skip=true -B package

      # 构建docker镜像
      - name: Build and push docker
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.docker_context }}
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ env.REGISTRY }}/team-gs/${{ inputs.docker_image }}:${{ env.BRANCH }}